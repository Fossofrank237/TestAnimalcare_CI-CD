//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnimalCare_dbFirst
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AnimalCareEntities : DbContext
    {
        public AnimalCareEntities()
            : base("AnimalCareEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Availability> Availabilities { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Owner> Owners { get; set; }
        public virtual DbSet<Pet> Pets { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Treatment> Treatments { get; set; }
        public virtual DbSet<Visit> Visits { get; set; }
        public virtual DbSet<HistoryVisit> HistoryVisits { get; set; }
        public virtual DbSet<OngoingVisit> OngoingVisits { get; set; }
        public virtual DbSet<OwnerWithPetCount> OwnerWithPetCounts { get; set; }
        public virtual DbSet<RecentPetTreatment> RecentPetTreatments { get; set; }
        public virtual DbSet<TreatmentHistory> TreatmentHistories { get; set; }
        public virtual DbSet<VeterinarySchedule> VeterinarySchedules { get; set; }
        public virtual DbSet<vw_ActivePetTreatments> vw_ActivePetTreatments { get; set; }
        public virtual DbSet<vw_ActiveVisitsForPets> vw_ActiveVisitsForPets { get; set; }
        public virtual DbSet<vw_EmployeeContacts> vw_EmployeeContacts { get; set; }
        public virtual DbSet<vw_TreatmentsWithoutMedicine> vw_TreatmentsWithoutMedicine { get; set; }
        public virtual DbSet<vw_VeterinaryAvailabilityForWeek> vw_VeterinaryAvailabilityForWeek { get; set; }
        public virtual DbSet<vw_VisitsForToday> vw_VisitsForToday { get; set; }
    
        public virtual int CloseVisit(Nullable<int> visitId)
        {
            var visitIdParameter = visitId.HasValue ?
                new ObjectParameter("VisitId", visitId) :
                new ObjectParameter("VisitId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CloseVisit", visitIdParameter);
        }
    
        public virtual ObjectResult<GetActiveVisitsByOwner_Result> GetActiveVisitsByOwner(Nullable<int> ownerId)
        {
            var ownerIdParameter = ownerId.HasValue ?
                new ObjectParameter("OwnerId", ownerId) :
                new ObjectParameter("OwnerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetActiveVisitsByOwner_Result>("GetActiveVisitsByOwner", ownerIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeesAvailableOnDay_Result> GetEmployeesAvailableOnDay(Nullable<System.DateTime> day)
        {
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesAvailableOnDay_Result>("GetEmployeesAvailableOnDay", dayParameter);
        }
    
        public virtual ObjectResult<GetEmployeeSchedule_Result> GetEmployeeSchedule(Nullable<int> employeeId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeSchedule_Result>("GetEmployeeSchedule", employeeIdParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<GetEmployeeVisitsOnDay_Result> GetEmployeeVisitsOnDay(Nullable<System.DateTime> day)
        {
            var dayParameter = day.HasValue ?
                new ObjectParameter("Day", day) :
                new ObjectParameter("Day", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeVisitsOnDay_Result>("GetEmployeeVisitsOnDay", dayParameter);
        }
    
        public virtual ObjectResult<GetPetDetails_Result> GetPetDetails(Nullable<int> petId)
        {
            var petIdParameter = petId.HasValue ?
                new ObjectParameter("PetId", petId) :
                new ObjectParameter("PetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPetDetails_Result>("GetPetDetails", petIdParameter);
        }
    
        public virtual ObjectResult<GetPetFullInfo_Result> GetPetFullInfo(Nullable<int> petId)
        {
            var petIdParameter = petId.HasValue ?
                new ObjectParameter("PetId", petId) :
                new ObjectParameter("PetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPetFullInfo_Result>("GetPetFullInfo", petIdParameter);
        }
    
        public virtual ObjectResult<GetReportForPet_Result> GetReportForPet(Nullable<int> petId)
        {
            var petIdParameter = petId.HasValue ?
                new ObjectParameter("PetId", petId) :
                new ObjectParameter("PetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportForPet_Result>("GetReportForPet", petIdParameter);
        }
    
        public virtual ObjectResult<GetTreatmentForPet_Result> GetTreatmentForPet(Nullable<int> petId)
        {
            var petIdParameter = petId.HasValue ?
                new ObjectParameter("PetId", petId) :
                new ObjectParameter("PetId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTreatmentForPet_Result>("GetTreatmentForPet", petIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GetOwnersWithMultiplePets_Result> sp_GetOwnersWithMultiplePets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetOwnersWithMultiplePets_Result>("sp_GetOwnersWithMultiplePets");
        }
    
        public virtual ObjectResult<sp_GetPetsWithoutTreatments_Result> sp_GetPetsWithoutTreatments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPetsWithoutTreatments_Result>("sp_GetPetsWithoutTreatments");
        }
    
        public virtual ObjectResult<sp_GetTotalVisitsByEmployee_Result> sp_GetTotalVisitsByEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTotalVisitsByEmployee_Result>("sp_GetTotalVisitsByEmployee");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
